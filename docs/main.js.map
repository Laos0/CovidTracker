{"version":3,"sources":["./src/environments/environment.ts","./src/app/views/main/search-bar/search-bar.component.html","./src/app/views/main/search-bar/search-bar.component.ts","./src/app/services/user-location-service/user-location.service.ts","./src/app/services/covid-data-service/covid-data.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/views/footer/footer/footer.component.ts","./src/app/views/footer/footer/footer.component.html","./src/app/views/header/header/header.component.ts","./src/app/views/header/header/header.component.html","./src/app/services/selection-service/selection.service.ts","./src/app/app-routing.module.ts","./src/app/views/main/covid-locations/covid-locations.component.ts","./src/app/views/main/covid-locations/covid-locations.component.html","./src/app/views/main/covid-global-stats/covid-global-stats.component.ts","./src/app/views/main/covid-global-stats/covid-global-stats.component.html","./src/main.ts","./src/app/views/main/covid-local-stats/covid-local-stats.component.ts","./src/app/views/main/covid-local-stats/covid-local-stats.component.html","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","<div class=\"container\">\n    <div>\n        <div class=\"search-bar-container\">\n            \n            <h2>Search For An Area</h2>\n            <!-- <input type=\"text\" name=\"search\" #box (keyup)=\"getSelectedCovidData(box.value)\" placeholder=\"Enter State, Region or County#\"> -->\n            <input type=\"text\" #searchbar (keyup)=\"getSelectedCovidData($event)\" [(ngModel)]=\"userInput\" placeholder=\"Enter state, county or region...\">\n            \n            <div class=\"list\">\n                <ul>\n                    <!-- Here we will display the Name of the county/state/region etc-->\n                    <li *ngFor=\"let data of searchResult\" >\n\n                            <div class=\"searchResult\" (click)=\"updateLocalCovidData(data)\">\n                                <ng-container *ngTemplateOutlet=\"(data.Province_State && data.Admin2 && data.Country_Region) ? usaTmpl : null; context: { d: data }\">\n                                </ng-container>\n\n                                <ng-container *ngTemplateOutlet=\"(data.Province_State && !data.Admin2 && data.Country_Region) ? countryWithStateTmpl : null; context: { d: data }\">\n                                </ng-container>\n\n                                <ng-container *ngTemplateOutlet=\"(!data.Province_State && !data.Admin2 && data.Country_Region) ? countryWithNoStateTmpl : null; context: { d: data }\">\n                                </ng-container>\n                            </div>\n                    </li>\n                </ul>\n            </div>\n    \n        </div>\n    </div>\n</div>\n\n\n\n\n<!-- Advance way of using ng-template by passing data to ng-template through ng-container with ngTemplateOutlet-->\n<ng-template #usaTmpl let-d=\"d\">\n    {{d.Province_State}}, {{d.Admin2}}, {{d.Country_Region}}\n</ng-template>\n\n<ng-template #countryWithStateTmpl let-d=\"d\">\n    {{d.Province_State}}, {{d.Country_Region}}\n</ng-template>\n\n<ng-template #countryWithNoStateTmpl let-d=\"d\">\n    {{d.Country_Region}}\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ICovidInfo } from 'src/app/models/i-covid-info';\nimport { CovidDataService } from 'src/app/services/covid-data-service/covid-data.service';\nimport { SelectionService } from 'src/app/services/selection-service/selection.service';\nimport { CovidLocalStatsComponent } from '../covid-local-stats/covid-local-stats.component';\n\n@Component({\n  selector: 'app-search-bar',\n  templateUrl: './search-bar.component.html',\n  styleUrls: ['./search-bar.component.scss']\n})\nexport class SearchBarComponent implements OnInit {\n\n  public userInput: string; // this is what the user typed: FormGroup/FormControl -> use subscribe\n  public searchResult: ICovidInfo[];\n  public covidData: ICovidInfo[];\n\n  constructor(private covidService: CovidDataService, private selectionService: SelectionService) { }\n\n  ngOnInit(): void {\n    //this.covidService.covidData = this.covidData;\n  }\n\n  // This method will keep being fired whenever user changes its value\n  getSelectedCovidData(event: any){\n\n    if(event.target.value === ''){\n      return this.searchResult = [];\n    }\n\n    // will need to do filter filter filter three times\n    this.searchResult = this.covidService.covidData.filter((data) => {\n\n      \n      // allow user to search by state name, County name, and Region\n      return data.Province_State.toLowerCase().startsWith(event.target.value.toLowerCase()) ||\n      data.Admin2.toLowerCase().startsWith(event.target.value.toLowerCase()) ||\n      data.Country_Region.toLowerCase().startsWith(event.target.value.toLowerCase());\n    });\n    \n    //console.log(this.searchResult);\n\n    return null;\n  }\n\n  public updateLocalCovidData(data: ICovidInfo){\n    \n    this.selectionService.onSearchBarSelect(data);\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CovidDataService } from '../covid-data-service/covid-data.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserLocationService {\n\n\n  lat: number = 37.553;\n  lng: number = -122.453;\n\n  // use this to get the county based on lattitude and longititude \n  // api_key is from TomTom: https://developer.tomtom.com/user/me/apps\n  api_key: string = \"3JNYCpyxBcFRnHiBp15KifGS005qLlim\"\n  url: string = \"https://api.tomtom.com/search/2/reverseGeocode/\" + this.lat + \",\" + this.lng + \".json?key=\" + this.api_key;\n  \n  constructor(private covidService: CovidDataService, private http: HttpClient) { }\n\n  // gets me the user's lattitude and longitude using promise instead of observable\n  getPosition(): Promise<any>\n  {\n    return new Promise((resolve, reject) => {\n\n      navigator.geolocation.getCurrentPosition(resp => {\n\n          resolve({lng: resp.coords.longitude, lat: resp.coords.latitude});\n        },\n        err => {\n          //reject(err);\n\n          // If user's location is turned off then \n          console.log(\"LOCATION SERVICE TURNED OFF: TURN ON TO SEE LAT AND LNG\");\n          //console.log(\"Location Service is Turned off\");\n        });\n    });\n\n  }\n\n  getGeolocationData(lat: number, lng: number){\n    \n    this.updateUrl(lat, lng);\n    return this.http.get(this.url);\n  }\n\n  updateUrl(lat: number, lng: number){\n    this.url = \"https://api.tomtom.com/search/2/reverseGeocode/\" + lat + \",\" + lng + \".json?key=\" + this.api_key;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { ResponseCovidInfo } from './responses/response-covid-info';\nimport { ICovidGlobal } from 'src/app/models/i-covid-global';\nimport { ICovidInfo } from 'src/app/models/i-covid-info';\nimport { map } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CovidDataService {\n\n  // Turn this into Enum if have time\n  // Covid data api source\n  private baseUrl: string = \"https://coronavirus.m.pipedream.net/\";\n\n  // make private, then need setter and getter\n  public covidData: ICovidInfo[];\n\n\n  constructor(private http: HttpClient) { }\n\n  getCovidStats(): Observable<ICovidGlobal[]>{\n\n    \n    const oldDate = localStorage.getItem('sessionTimer');\n\n    if(oldDate){\n      \n      const oldDateToNum = parseInt(oldDate);\n      const d1: Date = new Date(oldDateToNum);\n      \n      const d2: Date = new Date();\n      \n      const d1sec = Math.floor(d1.getTime() / 1000);\n      const d2sec = Math.floor(d2.getTime() / 1000);\n      \n      const seconds = d2sec - d1sec;\n      \n      if(seconds >= 10){\n        console.log(\"Clearing Storage\");\n        localStorage.clear();\n      }else{\n        console.log(\"Storage not clearning\");\n      }\n    }\n    \n    // retrieving the covid data from api call from localStorage\n    const cacheData = localStorage.getItem(\"covidData\");\n\n    if(cacheData){\n\n      return of(JSON.parse(cacheData));\n    }else{\n\n      \n      return this.http\n      .get<ICovidGlobal[]>(this.baseUrl)\n      .pipe(map((d) => {\n\n        localStorage.setItem(\"covidData\", JSON.stringify(d));\n        const date: number = Date.now();\n        localStorage.setItem('sessionTimer', date.toString());\n\n\n        return d;\n        }));\n    }\n\n  }\n\n  public get(url: string, options?: any) { \n  return this.http.get(url, options); \n  } \n\n  public post(url: string, data: any, options?: any) { \n  return this.http.post(url, data, options); \n  } \n\n  public put(url: string, data: any, options?: any) { \n  return this.http.put(url, data, options); \n  } \n\n  public delete(url: string, options?: any) { \n  return this.http.delete(url, options); \n  }\n\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'covid-tracking-app';\n}\n","<app-header></app-header>\n\n<app-covid-global-stats></app-covid-global-stats>\n\n<br><br>\n<app-search-bar></app-search-bar>\n<app-covid-local-stats></app-covid-local-stats>\n\n<app-footer></app-footer>","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CovidLocationsComponent } from './views/main/covid-locations/covid-locations.component';\nimport { FooterComponent } from './views/footer/footer/footer.component';\nimport { HeaderComponent } from './views/header/header/header.component';\nimport { CovidGlobalStatsComponent } from './views/main/covid-global-stats/covid-global-stats.component';\nimport { CovidLocalStatsComponent } from './views/main/covid-local-stats/covid-local-stats.component';\nimport { SearchBarComponent } from './views/main/search-bar/search-bar.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CovidLocationsComponent,\n    FooterComponent,\n    HeaderComponent,\n    CovidGlobalStatsComponent,\n    CovidLocalStatsComponent,\n    SearchBarComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"footer\">\n    <p>Copyright &copy; 2022 SomeDev</p>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"header\">\n    <h1>Covid<span>19</span> Tracker</h1>\n</div>","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { ICovidInfo } from 'src/app/models/i-covid-info';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SelectionService {\n\n  // when subject publishes, all listeners on the observable will react to \n  private _onSearchBarSelect: Subject<ICovidInfo> = new Subject<ICovidInfo>();\n  public onSearchBarSelect$: Observable<ICovidInfo> = this._onSearchBarSelect.asObservable();\n\n  constructor() { }\n\n  public onSearchBarSelect(data: ICovidInfo): void{\n\n    // publish the data, whoever listens(subscribe) will receive the data\n    this._onSearchBarSelect.next(data);\n\n    \n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ICovidInfo } from 'src/app/models/i-covid-info';\nimport { CovidDataService } from 'src/app/services/covid-data-service/covid-data.service';\nimport { ResponseCovidInfo } from 'src/app/services/covid-data-service/responses/response-covid-info';\n\n@Component({\n  selector: 'app-covid-locations',\n  templateUrl: './covid-locations.component.html',\n  styleUrls: ['./covid-locations.component.scss']\n})\nexport class CovidLocationsComponent implements OnInit {\n\n  public globalCovid = [];\n  //public covidInfos: ICovidInfo[] = [];\n\n  constructor(private covidService: CovidDataService) { }\n\n  ngOnInit(): void {\n\n\n  }\n\n  getData(){\n    this.covidService.getCovidStats().subscribe({\n      next: (resp: any) => {\n        this.globalCovid = resp.summaryStats.global;\n        console.log(this.globalCovid);\n      },\n      error: (e) => {console.error(e)},\n      complete: () => {console.log(\"Data returned completed\")}\n    });\n    \n  }\n\n\n}\n","<button (click)=\"getData()\">Get Data</button>\n\n<!--\n    \n<div>\n    <ul>\n        <li *ngFor=\"let i of covidInfos\">\n            {{i.state}}\n            <ng-container *ngTemplateOutlet=\"site; context: {covidSite: i.covid19Site}\">\n\n            </ng-container>\n        </li>\n    </ul>\n</div>\n\n<ng-template #site let-x=\"covidSite\">\n    <a href=x target='_blank'>{{x}}</a>\n</ng-template>\n\n-->","\nimport { Component, OnInit } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { ICovidGlobalInfo } from 'src/app/models/i-covid-global-info';\nimport { CovidDataService } from 'src/app/services/covid-data-service/covid-data.service';\n\n@Component({\n  selector: 'app-covid-global-stats',\n  templateUrl: './covid-global-stats.component.html',\n  styleUrls: ['./covid-global-stats.component.scss']\n})\nexport class CovidGlobalStatsComponent implements OnInit {\n\n  public globalConfirmed: number;\n  public globalDeaths: number;\n  public lastUpdatedGlobal: string; // theres one for global and one for each country\n  public dateNow: Date;\n  public minsPassed: any;\n\n  private _onDateReturned: Subject<void> = new Subject<void>();\n  public onDateReturned$: Observable<void> = this._onDateReturned.asObservable();\n\n  constructor(private covidService: CovidDataService) { }\n\n  ngOnInit(): void {\n    this.getData();\n  }\n\n  // this method will fetch us all the global stats on covid19\n  // under the key global: confirmed, recovered, deaths\n  getData(){\n\n    // get request for all covid stats\n    this.covidService.getCovidStats().subscribe({\n      next: (resp: any) => {\n        \n        this.covidService.covidData = resp.rawData;\n        // getting the global stats from object literal\n        this.globalConfirmed = resp.summaryStats.global.confirmed;\n        this.globalDeaths = resp.summaryStats.global.deaths;\n        this.lastUpdatedGlobal = resp.cache.lastUpdated;\n       // console.log(this.covidService.covidData);\n\n       // Get the current time\n       this.dateNow = new Date();\n       this._onDateReturned.next();\n      },\n      error: (e) => {console.error(e)},\n      complete: () => {console.log(\"Data returned completed from CovoidGlobalStats.component.ts\")}\n    });\n\n  }\n\n}\n","<div class=\"container\">\n    <p class=\"lastUpdated\">Last updated: {{lastUpdatedGlobal}}</p>\n    <h1 class=\"centerText\">Global Summary Stats</h1>\n\n    <div class=\"confirmedCases\">\n        <h2 class=\"centerText\">Confirmed Cases</h2>\n        <p class=\"centerText\">{{globalConfirmed}}</p>\n    </div>\n\n    <div class=\"confirmedDeaths\">\n        <h2 class=\"centerText\">Deaths</h2>\n        <p class=\"centerText\">{{globalDeaths}}</p>\n    </div>\n</div>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ICovidInfo } from 'src/app/models/i-covid-info';\nimport { CovidDataService } from 'src/app/services/covid-data-service/covid-data.service';\nimport { SelectionService } from 'src/app/services/selection-service/selection.service';\nimport { UserLocationService } from 'src/app/services/user-location-service/user-location.service';\n\n@Component({\n  selector: 'app-covid-local-stats',\n  templateUrl: './covid-local-stats.component.html',\n  styleUrls: ['./covid-local-stats.component.scss']\n})\nexport class CovidLocalStatsComponent implements OnInit {\n\n  public state: string;\n  public county: string;\n  public region: string;\n  public localConfirmed: string;\n  public localDeaths: string;\n  public lastUpdated: string;\n\n  public _onUserLocation = new Subject<void>();\n  public onUserLocation = this._onUserLocation.asObservable();\n\n  constructor(private covidService: CovidDataService, \n              private userLocationService: UserLocationService, \n              private selectionService: SelectionService) { }\n\n  ngOnInit(): void {\n    \n\n    // get latitude and longitude from user \n    this.getCurrentLocation();\n\n    // not needed, just for practicing purposes and to replace take(#)\n    const _unSub = new Subject<void>();\n\n    // once the _onUserLocation subject publishes/alert its data/non-data then this line gets run\n    this.onUserLocation.pipe(takeUntil(_unSub)).subscribe((d) =>{\n\n      _unSub.next();\n      // fetching all covid data\n      this.getLocalStats();\n    });\n\n    this.selectionService.onSearchBarSelect$.subscribe((data: ICovidInfo) =>{\n      this.state = data.Province_State;\n      this.county = data.Admin2;\n      this.region = data.Country_Region;\n      this.localConfirmed = data.Confirmed;\n      this.localDeaths = data.Deaths;\n      this.lastUpdated = data.Last_Update;\n    });\n  }\n\n  getLocalStats(){\n    this.covidService.getCovidStats().subscribe({\n      next: (resp: any) => {\n        //console.log(resp.rawData);\n\n        // a filter that searches for covid data based on State\n        const localCovidData = resp.rawData.filter(obj => {\n         \n          return obj.Province_State === this.state;\n        });\n\n        // After filtering, we filter the county within the state to get the revelant covid data\n        const LCD = localCovidData.filter(obj => {\n          return obj.Admin2 === this.county;\n        });\n\n        this.localConfirmed = LCD[0].Confirmed;\n        this.localDeaths = LCD[0].Deaths;\n        this.lastUpdated = LCD[0].Last_Update;\n        this.region = LCD[0].Country_Region;\n\n        \n        // console.log(localCovidData[0]);\n      },\n      error: (e) => {console.error(e)},\n      complete: () => {console.log(\"Data returned completed\")}\n    });\n  }\n\n  // get user's coordinates\n  getCurrentLocation(){\n    this.userLocationService.getPosition().then(resp=>\n    {\n      //console.log(`Positon: ${resp.lng} ${resp.lat}`);\n      //console.log(resp)\n      this.getGeolocationData(resp.lat, resp.lng);\n    });\n  }\n\n  // this method will call the service to retrieve the county of the user based on its latitude and longitude\n  // using TomTom's api \n  getGeolocationData(lat: number, lng: number){\n    this.userLocationService.getGeolocationData(lat, lng).subscribe((resp:any)=>{\n\n      this.state = resp.addresses[0].address.countrySubdivisionName;\n      this.county = resp.addresses[0].address.countrySecondarySubdivision;\n\n      // this is how you publish/alert on a subject to listeners (observables)\n      this._onUserLocation.next();\n    });;\n  }\n\n}\nfunction delay(arg0: number): import(\"rxjs\").OperatorFunction<Object, unknown> {\n  throw new Error('Function not implemented.');\n}\n\nfunction take(arg0: number): import(\"rxjs\").OperatorFunction<void, unknown> {\n  throw new Error('Function not implemented.');\n}\n\nfunction timeout(arg0: number): import(\"rxjs\").OperatorFunction<unknown, unknown> {\n  throw new Error('Function not implemented.');\n}\n\nfunction takeuntil(): import(\"rxjs\").OperatorFunction<unknown, unknown> {\n  throw new Error('Function not implemented.');\n}\n\n","<div class=\"container\">\n    <p class=\"lastUpdated\">Last updated: {{lastUpdated}}</p>\n    <!--Use a local variable that will display the name of the country-->\n    <h1 class=\"centerText\">\n\n        <span *ngIf=\"county\">\n            {{county | titlecase}} \n        </span>\n\n        <span *ngIf=\"state\">\n            {{state}} \n        </span>\n\n        <span *ngIf=\"region\">\n            {{region}} \n        </span>\n    </h1>\n\n    <div class=\"confirmedCases\">\n        <h2 class=\"centerText\">Confirmed Cases</h2>\n        <p class=\"centerText\">{{localConfirmed}}</p>\n    </div>\n\n    <div class=\"confirmedDeaths\">\n        <h2 class=\"centerText\">Confirmed Deaths</h2>\n        <p class=\"centerText\">{{localDeaths}}</p>\n    </div>\n</div>\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}